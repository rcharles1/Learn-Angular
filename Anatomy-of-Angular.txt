----------------------  ANGULAR -------------------------
DAY 01
    1.1 Anatomy Of a Component
        html and css can be placed in a separate file
        Syntax;
            import {Component} from '@angular/core';
            @Component({
            selector: 'app-root',
            template: `
                Hello
            `,
            standalone: true,
            })
            export class AppComponent {}
    
    1.2 Updating the Component class via Imterpolation
        variable defined in the TypeScript class can be referenced in the template.
        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-root',
            template: `
                Hello {{ city }}, 
            {{ 1+1 }}
            `,
            standalone: true,
            })
            export class AppComponent {
            city = 'San Francisco';
            }

    1.3 Composing Components
        use selector property in the Component configuration to reference a component in another template like
        an HTML tag. <app-root  />

        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-user',
            template: `
                Username: {{ username }}
            `,
            standalone: true,
            })
            export class UserComponent {
            username = 'youngTech';
            }

            @Component({
            selector: 'app-root',
            template: `<section><app-user /></section>`,
            standalone: true,
            imports: [UserComponent],
            })
            export class AppComponent {}

    1.4 Control flow in Conmponents - programmatically making decisions
        a.use @if ()
            Syntax;
                import {Component} from '@angular/core';

                @Component({
                selector: 'app-root',
                template: `
                    @if (isServerRunning) {
                    <span>Yes, the server is running</span>
                    }
                    @else {
                    <span>No, the server is not running</span>
                    }
                `,
                standalone: true,
                })
                export class AppComponent {
                // add the boolean property here
                isServerRunning = false;
                }
        b.use @for
            Syntax;
                import {Component} from '@angular/core';

                @Component({
                selector: 'app-root',
                template: `
                   @for (user of users; track user.id) {
                        <p>{{ user.name }}</p>
                   }
                `,
                standalone: true,
                })
                export class AppComponent {
                    users = [{id: 0, name: 'Sarah'}, {id: 1, name: 'Amy'}, {id: 2, name: 'Rachel'}, {id: 3, name: 'Jessica'}, {id: 4, name: 'Poornima'}]
                }
    
    1.5 Property Binding in Angular
        makes it possible to set values to properties of HTML elements, Angular Components.

        Syntax - Property Binding in template :- By wrapping atttribute name in '[]';
            import {Component} from '@angular/core';

            @Component({
                selector: 'app-root',
                styleUrls: ['app.component.css'],
                template: `
                    <div [contentEditable]="isEditable"></div>
                `,
                standalone: true,
            })
            export class AppComponent {
                isEditable = true;
            }

    1.5 Event Handling
        bind events to an element by wrapping '()' ie; (event)="EventHandler"

        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-root',
            template: `
                <section (mouseover)="onMouseOver()">
                There's a secret message for you, hover to reveal üëÄ
                {{ message }}
                </section>
            `,
            standalone: true,
            })
            export class AppComponent {
                message = '';

                onMouseOver() {
                    this.message = 'Way to go üöÄ';
                }
            }

    1.6 Component Communication 
        a. @Input
            Similar concept to Props in React.
            The @Input decorator sends information to Components.
            Syntax; 
            // app.component.ts ---------PARENT COMPONENT
            import {Component} from '@angular/core';
            import {UserComponent} from './user.component';

            @Component({
            selector: 'app-root',
            template: `
                <app-user occupation="Angular Developer" name="Simran"></app-user>
            `,
            standalone: true,
            imports: [UserComponent],
            })
            export class AppComponent {}

            // user.component.ts ---------CHILD COMPONENT
                import {Component, Input} from '@angular/core';

                @Component({
                selector: 'app-user',
                template: `
                    <p>The user's name is {{name}}</p>
                `,
                standalone: true,
                })
                export class UserComponent {
                    @Input() occupation = ''
                    @Input() name = ''
                }
        b. @Output
            child component to communicate to a parent component.
            the decorator @Output is used in conjunction with EventEmitter.

            Syntax;
            // Child Component from which the event is emitted for the Parent Component to listen.
            import {Component, Output, EventEmitter} from '@angular/core';

            @Component({
            selector: 'app-child',
            styles: `.btn { padding: 5px; }`,
            template: `
                <button class="btn" (click)="addItem()">Add Item</button>
            `,
            standalone: true,
            })
            export class ChildComponent {
                @Output() addItemEvent = new EventEmitter<string>();
                addItem() {
                    this.addItemEvent.emit('üê¢');
                }
            }

            // Parent Component - listens for the event
            import {Component} from '@angular/core';
            import {ChildComponent} from './child.component';

            @Component({
            selector: 'app-root',
            template: `
                <app-child (addItemEvent)="addItem($event)" />
                <p>üê¢ all the way down {{ items.length }}</p>
            `,
            standalone: true,
            imports: [ChildComponent],
            })
            export class AppComponent {
                items = new Array();

                addItem(item: string) {
                    this.items.push(item);
                }
            }

    1.7 Deferrable Views 
        Load a Component or section of a Component at a later time.
        It has multiple triggers.
        Viewport Trigger is best when deferring content that is far down the page. 
        Syntax;
        @defer (on viewport) {
            <comments /> // Component thea is to be deferred
            } @placeholder {
                <p>Future comments</p>
            } @loading (minimum 2s) {
                <p>Loading comments...</p>
            }
    
    1.8 Optimizing Images
        a. NgOptimizedImage Directive
            Use ngSrc instead of the conventional src attribute in images;
                Syntax:
                    <img ngSrc="" height="32" width="32" /> // Static Image
                    <img [ngSrc]="imageSource" fill />
        b. Fill - Skip the use of Height and Width atttributes
            Opposed to using height and width atttributes, a fill atttribute can be used.
            Beware of background behaviour.
            Must be used withe the parent Component position either at; relative, fixed or absolute.
        c. Priotized Important Images 
            Images with largest on screen grpahics.
            Syntax;
                <img ngSrc="" height="32" width="32" priority />
        d. Image Loader
            shorter, relative URLs

    1.9 Routing Overview - Angular Router
        a. Setting Up to use Angular Router
            Syntax
                // app/app.routes.ts
                import {Routes} from '@angular/router';

                export const routes: Routes = [];

                // app.app.config.ts
                import {ApplicationConfig} from '@angular/core';
                import {provideRouter} from '@angular/router';
                import {routes} from './app.routes';

                export const appConfig: ApplicationConfig = {
                    providers: [provideRouter(routes)],
                };

                // app.app.components.ts
                import {Component} from '@angular/core';
                import {RouterOutlet} from '@angular/router';

                @Component({
                selector: 'app-root',
                template: `
                    <nav>
                    <a href="/">Home</a>
                    |
                    <a href="/user">User</a>
                    </nav>
                    <router-outlet />
                `,
                standalone: true,
                imports: [RouterOutlet],
                })
                export class AppComponent {}
        b. Define a Route
            Inside the app.routes.ts
            Syntax;
                import {Routes} from '@angular/router';
                import {HomeComponent} from './home/home.component';
                import {UserComponent} from './user/user.component';

                export const routes: Routes = [
                    {
                        path: '',
                        title: 'App Home Page', // Page Title
                        component: HomeComponent,
                    },
                    {
                        path: 'user',
                        component: UserComponent,
                    }
                ];
        c. RouteLink for Navigation
            navigate within the app without entire page refreshing.
            Syntax;
                // app/app.component.ts
                import {Component} from '@angular/core';
                import { RouterLink, RouterOutlet } from '@angular/router';

                @Component({
                selector: 'app-root',
                template: `
                    <nav>
                    <a routerLink="/">Home</a>
                    |
                    <a routerLink="/user">User</a>
                    </nav>
                    <router-outlet />
                `,
                standalone: true,
                imports: [RouterLink, RouterOutlet],
                })
                export class AppComponent {}

    2.0 Forms Overview
        Angular Form Types:- template-driven and reactive
        a. Creating an Input field
            <input id="Name" type="text" />
        b. Enabling data binding - FormsModule's directive ngModel
            data binding - attach the input value to a property of your class.
            i.e ngModel binds input values to properties of my class.
            [()] banana-in-a-box - Two-way binding, property binding and event binding
            Syntax;
                import {Component} from '@angular/core';
                import {FormsModule} from '@angular/forms';

                @Component({
                    selector: 'app-user',
                    template: `
                        <p>Username: {{ username }}</p>
                        <p>{{ username }}'s favorite framework: {{ favoriteFramework }}</p>
                        <label for="framework">
                        Favorite Framework:
                        <input id="framework" type="text" [(ngModel)]="favoriteFramework" />
                        </label>
                    `,
                    standalone: true,
                    imports: [FormsModule],
                })
                export class UserComponent {
                    username = 'youngTech';
                    favoriteFramework = '';
                }
        c. Form Control Value
            Retrieving value of input field in the component class with the this Syntax.

            Syntax;
                import {Component} from '@angular/core';
                import {FormsModule} from '@angular/forms';

                @Component({
                selector: 'app-user',
                template: `
                    <p>Username: {{ username }}</p>
                    <p>Framework:{{ favoriteFramework }}</p>
                    <label for="framework">
                    Favorite Framework:
                    <input id="framework" type="text" [(ngModel)]="favoriteFramework" />
                    </label>
                    <button (click)="showFramework()">Show Framework</button>
                `,
                standalone: true,
                imports: [FormsModule],
                })
                export class UserComponent {
                    favoriteFramework = '';
                    username = 'youngTech';

                    showFramework() {
                        alert(this.favoriteFramework)
                    }
                }
        d. Reactive Forms
            i. Creating reactive forms - Use FormControl and FormGroup i.e.
                this.form = new FormGroup({
                    name: new FormControl(''),
                    email: new FormControl('')
                });

            Syntax;
                import {Component} from '@angular/core';
                import {ReactiveFormsModule, FormControl, FormGroup} from '@angular/forms';

                @Component({
                selector: 'app-root',
                template: `
                    <form [formGroup]="profileForm" (ngSubmit)="handleSubmit()">
                    <h2>Profile Form</h2>
                    <p>Name: {{ profileForm.value.name }}</p>
                    <p>Email: {{ profileForm.value.email }}</p>
                    <button type="submit">Submit</button>
                    </form>
                `,
                standalone: true,
                imports: [ReactiveFormsModule],
                })
                export class AppComponent {
                    profileForm = new FormGroup({
                        name: new FormControl(''),
                        email: new FormControl(''),
                    });

                    handleSubmit() {
                        alert(
                        this.profileForm.value.name + ' | ' + this.profileForm.value.email
                        );
                    }
                }
            ii. Validating forms - import Validators.
                FormGroup class' property, valid determines if a form is valid
                Syntax;
                    import {Component} from '@angular/core';
                    import {FormGroup, FormControl} from '@angular/forms';
                    import {ReactiveFormsModule, Validators} from '@angular/forms';

                    @Component({
                        selector: 'app-root',
                        template: `
                            <form [formGroup]="profileForm">
                            <input type="text" formControlName="name" name="name" />
                            <input type="email" formControlName="email" name="email" />
                            <button type="submit" [disabled]="!profileForm.valid">Submit</button>
                            </form>
                        `,
                        standalone: true,
                        imports: [ReactiveFormsModule],
                    })
                    export class AppComponent {
                        profileForm = new FormGroup({
                            name: new FormControl('', Validators.required),
                            email: new FormControl('',[ Validators.required, Validators.email]),
                        });
                    }

    3.0 Dependency Injection -
        a. Creating an injectable Services
            Denoted by the @Injectible decorator that indicates to the DI System that a service is available to be requested.
            Syntax;
                @Injectable({
                    providedIn: 'root' // scope in which the service is available
                })
                class UserService {
                    // methods to retrieve and return data
                }

            Example;
                import {Injectable} from '@angular/core';

                @Injectable({
                providedIn: 'root'
                })

                export class CarService {
                cars = ['Sunflower GT', 'Flexus Sport', 'Sprout Mach One'];

                getCars(): string[] {
                    return this.cars;
                }

                getCar(id: number) {
                    return this.cars[id];
                }
                }
        b. Using a service
            Depending on context:
                1. Root Injector  defined in root module
                ii. Component Injector
                iii. Hierachical Injector

            Inject-based Dependency Injection
                Syntax - Component Injector
                    import {Component, inject} from '@angular/core';
                    import {CarService} from './car.service';

                    @Component({
                        selector: 'app-root',
                        template: `<p>Car Listing: {{ display }}</p>`,
                        standalone: true,
                    })
                    export class AppComponent {
                        display = '';
                        carService = inject(CarService);

                        constructor() {
                            this.display = this.carService.getCars().join('‚≠êÔ∏è ')
                        }
                    }
                    
            Constructor-based Dependency Injection
            specify resources as parameters to the Constructor.
                Syntax;
                    constructor(private carService: CarService) {
                        this.display = this.carService.getCars().join(' ‚≠êÔ∏è ');
                    }

    4.0 Pipes
        Pure functions, with no side effects that transfom data in templates. 
        Syntax;
            import {Component} from '@angular/core';
            import {LowercasePipe} from '@angular/common';

            @Component({
            selector: 'app-root',
            template: `
                {{ username | lowercase }}
            `,
            standalone: true,
            imports: [LowercasePipe],
            })
            export class AppComponent {
            username = 'yOunGTECh';
            }
        a. Formatting data with Pipes
            By passing parameters to a pipe, via a ':'
            Syntax;
                template: `{{ date | date:'medium' }}`;
        b. Creating Custom Pipes
            A Pipe is a TypeScript class with @Pipe decorator
            Syntax;
                    import {Pipe, PipeTransform} from '@angular/core';
                    @Pipe({
                        standalone: true,
                        name: 'star',
                    })
                    export class StarPipe implements PipeTransform {
                        // Logic is put in the transfom function
                        transform(value: string): string {
                            return `‚≠êÔ∏è ${value} ‚≠êÔ∏è`;
                        }
                    }

    5.0 Conditions and Loops
        a. @if and @else blocks are used.
            Syntax;
                // user-controls.component.ts
                @Component({
                    standalone: true,
                    selector: 'user-controls',
                    template: `
                        @if (isAdmin) {
                        <button>Erase database</button>
                        } @else {
                        <p>You are not authorized.</p>
                        }
                    `,
                })
                export class UserControls {
                isAdmin = true;
                }
        b. Rendering a list
            Similar to JS' for...of loops, Angular provides the @for block but a track keyword.
            that tracks each element when elements of a list change or move.
            Syntax;
                <!-- ingredient-list.component.html -->
                <ul>
                    @for (ingredient of ingredientList; track ingredient.name) {
                        <li>{{ ingredient.quantity }} - {{ ingredient.name }}</li>
                    }
                </ul>

    6.0 More Learnings
        a. Route parameters
            Enabling dynamic Navigation via routerLink
        b. HTTP Communication
            
            

