----------------------  ANGULAR -------------------------
DAY 01
    1.1 Anatomy Of a Component
        html and css can be placed in a separate file
        Syntax;
            import {Component} from '@angular/core';
            @Component({
            selector: 'app-root',
            template: `
                Hello
            `,
            standalone: true,
            })
            export class AppComponent {}
    
    1.2 Updating the Component class via Imterpolation
        variable defined in the TypeScript class can be referenced in the template.
        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-root',
            template: `
                Hello {{ city }}, 
            {{ 1+1 }}
            `,
            standalone: true,
            })
            export class AppComponent {
            city = 'San Francisco';
            }

    1.3 Composing Components
        use selector property in the Component configuration to reference a component in another template like
        an HTML tag. <app-root  />

        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-user',
            template: `
                Username: {{ username }}
            `,
            standalone: true,
            })
            export class UserComponent {
            username = 'youngTech';
            }

            @Component({
            selector: 'app-root',
            template: `<section><app-user /></section>`,
            standalone: true,
            imports: [UserComponent],
            })
            export class AppComponent {}

    1.4 Control flow in Conmponents - programmatically making decisions
        a.use @if ()
            Syntax;
                import {Component} from '@angular/core';

                @Component({
                selector: 'app-root',
                template: `
                    @if (isServerRunning) {
                    <span>Yes, the server is running</span>
                    }
                    @else {
                    <span>No, the server is not running</span>
                    }
                `,
                standalone: true,
                })
                export class AppComponent {
                // add the boolean property here
                isServerRunning = false;
                }
        b.use @for
            Syntax;
                import {Component} from '@angular/core';

                @Component({
                selector: 'app-root',
                template: `
                   @for (user of users; track user.id) {
                        <p>{{ user.name }}</p>
                   }
                `,
                standalone: true,
                })
                export class AppComponent {
                    users = [{id: 0, name: 'Sarah'}, {id: 1, name: 'Amy'}, {id: 2, name: 'Rachel'}, {id: 3, name: 'Jessica'}, {id: 4, name: 'Poornima'}]
                }
    
    1.5 Property Binding in Angular
        makes it possible to set values to properties of HTML elements, Angular Components.

        Syntax - Property Binding in template :- By wrapping atttribute name in '[]';
            import {Component} from '@angular/core';

            @Component({
                selector: 'app-root',
                styleUrls: ['app.component.css'],
                template: `
                    <div [contentEditable]="isEditable"></div>
                `,
                standalone: true,
            })
            export class AppComponent {
                isEditable = true;
            }

    1.5 Event Handling
        bind events to an element by wrapping '()' ie; (event)="EventHandler"

        Syntax;
            import {Component} from '@angular/core';

            @Component({
            selector: 'app-root',
            template: `
                <section (mouseover)="onMouseOver()">
                There's a secret message for you, hover to reveal ðŸ‘€
                {{ message }}
                </section>
            `,
            standalone: true,
            })
            export class AppComponent {
                message = '';

                onMouseOver() {
                    this.message = 'Way to go ðŸš€';
                }
            }

    1.6 Component Communication 
        a. @Input
            Similar concept to Props in React.
            The @Input decorator sends information to Components.
            Syntax; 
            // app.component.ts ---------PARENT COMPONENT
            import {Component} from '@angular/core';
            import {UserComponent} from './user.component';

            @Component({
            selector: 'app-root',
            template: `
                <app-user occupation="Angular Developer" name="Simran"></app-user>
            `,
            standalone: true,
            imports: [UserComponent],
            })
            export class AppComponent {}

            // user.component.ts ---------CHILD COMPONENT
                import {Component, Input} from '@angular/core';

                @Component({
                selector: 'app-user',
                template: `
                    <p>The user's name is {{name}}</p>
                `,
                standalone: true,
                })
                export class UserComponent {
                    @Input() occupation = ''
                    @Input() name = ''
                }
        b. @Output
            child component to communicate to a parent component.
            the decorator @Output is used in conjunction with EventEmitter

    1.7

